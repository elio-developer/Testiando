# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
    BuildConfiguration: Release
    DotNetVersion: 8.x

stages:
- stage: Build_iOS
  jobs:
  - job: BuildMAUIApps
    displayName: Gig Pay Tracker App
    pool:
      vmImage: 'macOS-13'
      demands:
      - MSBuild

    steps:
    - script: sudo xcode-select -s /Applications/Xcode_15.2.app
      displayName: 'Select Xcode Version'

    - task: InstallAppleCertificate@2
      displayName: Install Apple Certificate
      inputs:
        certSecureFile: 'apple-sign-cert.p12'
        certPwd: '$(P12password)'
        keychain: 'temp'

    - task: InstallAppleProvisioningProfile@1
      displayName: Install Apple Provisioning Profile
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: 'provisioning.mobileprovision'
    
    - task: UseDotNet@2
      displayName: .NET Version
      inputs:
        packageType: 'sdk'
        version: '$(DotNetVersion)'

    - task: Bash@3
      displayName: Install MAUI
      inputs:
        targetType: 'inline'
        script: |
          dotnet nuget locals all --clear
          dotnet workload install maui-android maui-ios

    - task: Bash@3
      displayName: Restore nuget
      inputs:
        targetType: 'inline'
        script: |
          cd GigPayTracker
          dotnet restore GigPayTracker.csproj

    - task: Bash@3
      displayName: Build iOS App
      inputs:
        targetType: 'inline'
        script: |
          cd GigPayTracker
          dotnet publish -f net8.0-ios -c Release

    - task: CopyFiles@2
      inputs:
        Contents: |
          **/*.app
          **/*.ipa
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_ios'
        publishLocation: 'Container'